# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthPayload {
  token: String!
  user: UserDto!
}

input CreateFormInput {
  fields: [FormFieldInput!]!
  name: String!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  role: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FormDto {
  _id: ID!
  createdAt: DateTime!
  createdBy: UserDto!
  fields: [FormFieldDto!]!
  name: String!
  updatedAt: DateTime!
}

type FormFieldDto {
  chapter: String
  color: String
  consistencyCondition: String
  description: String
  disabled: Boolean
  errorType: String
  height: String
  hint: String
  inconsistencyMessage: String
  label: String
  name: String
  options: [OptionDto!]
  placeholder: String
  question: String
  questionNumber: String
  readonly: Boolean
  required: Boolean!
  requirementLevel: String
  rules: [String!]
  specificType: String
  type: String!
  value: String
  variableName: String
}

input FormFieldInput {
  chapter: String
  color: String
  consistencyCondition: String
  description: String
  disabled: Boolean
  errorType: String
  height: String
  hint: String
  inconsistencyMessage: String
  label: String
  name: String
  options: [OptionInput!]
  placeholder: String
  question: String
  questionNumber: String
  readonly: Boolean
  required: Boolean
  requirementLevel: String
  rules: [String!]
  specificType: String
  type: String!
  value: String
  variableName: String
}

type Mutation {
  createForm(createFormInput: CreateFormInput!): FormDto!
  createUser(createUserInput: CreateUserInput!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  removeForm(id: String!): FormDto!
  updateForm(updateFormInput: UpdateFormInput!): FormDto!
  updateUser(updateUserInput: UpdateUserInput!): UserDto!
}

type OptionDto {
  label: String!
  value: String!
}

input OptionInput {
  label: String!
  value: String!
}

type Query {
  form(id: String!): FormDto!
  forms: [FormDto!]!
  me: UserDto
}

input UpdateFormInput {
  fields: [FormFieldInput!]
  id: String!
  name: String
}

input UpdateUserInput {
  _id: ID!
  email: String
  name: String
  password: String
}

type UserDto {
  _id: ID!
  email: String!
  name: String!
  password: String!
  role: String!
}