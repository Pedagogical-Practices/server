# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AttendanceRecord {
  advisorSignature: String!
  classType: String!
  date: String!
  group: String!
  hours: Int!
  observations: String
  other: String
  topic: String!
  tutorSignature: String!
  week: String!
}

type AuthPayload {
  token: String!
  user: UserDto!
}

type Course {
  _id: ID!
  assignedGroups: [String!]!
  createdAt: String!
  createdBy: String!
  institution: String!
  name: String!
}

input CreateAttendanceRecordInput {
  advisorSignature: String!
  classType: String!
  date: String!
  group: String!
  hours: Int!
  observations: String
  other: String
  protocolId: ID!
  topic: String!
  tutorSignature: String!
  week: String!
}

input CreateCourseInput {
  assignedGroups: [String!]!
  institution: String!
  name: String!
}

input CreateFormInput {
  fields: [FormFieldInput!]!
  name: String!
}

input CreateProtocolInput {
  courseId: ID!
  formId: ID!
  module: String!
  name: String!
}

input CreateSubmissionInput {
  data: JSON!
  formId: ID!
  protocolId: ID!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  role: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FormDto {
  _id: ID!
  createdAt: DateTime!
  createdBy: UserDto!
  fields: [FormFieldDto!]!
  name: String!
  updatedAt: DateTime!
}

type FormFieldDto {
  chapter: String
  color: String
  consistencyCondition: String
  description: String
  disabled: Boolean
  errorType: String
  height: String
  hint: String
  inconsistencyMessage: String
  label: String
  name: String
  options: [OptionDto!]
  placeholder: String
  question: String
  questionNumber: String
  readonly: Boolean
  required: Boolean!
  requirementLevel: String
  rules: [String!]
  specificType: String
  type: String!
  value: String
  variableName: String
}

input FormFieldInput {
  chapter: String
  color: String
  consistencyCondition: String
  description: String
  disabled: Boolean
  errorType: String
  height: String
  hint: String
  inconsistencyMessage: String
  label: String
  name: String
  options: [OptionInput!]
  placeholder: String
  question: String
  questionNumber: String
  readonly: Boolean
  required: Boolean
  requirementLevel: String
  rules: [String!]
  specificType: String
  type: String!
  value: String
  variableName: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  createAttendanceRecord(createAttendanceRecordInput: CreateAttendanceRecordInput!): AttendanceRecord!
  createCourse(createCourseInput: CreateCourseInput!): Course!
  createForm(createFormInput: CreateFormInput!): FormDto!
  createProtocol(createProtocolInput: CreateProtocolInput!): Protocol!
  createUser(createUserInput: CreateUserInput!): AuthPayload!
  deleteCourse(id: String!): Boolean!
  deleteProtocol(id: String!): Boolean!
  deleteSubmission(id: String!): Boolean!
  login(email: String!, password: String!): AuthPayload!
  removeForm(id: String!): FormDto!
  submitProtocol(createSubmissionInput: CreateSubmissionInput!): Submission!
  updateCourse(updateCourseInput: UpdateCourseInput!): Course!
  updateForm(updateFormInput: UpdateFormInput!): FormDto!
  updateProtocol(updateProtocolInput: UpdateProtocolInput!): Protocol!
  updateSubmission(updateSubmissionInput: UpdateSubmissionInput!): Submission!
  updateUser(updateUserInput: UpdateUserInput!): UserDto!
}

type OptionDto {
  label: String!
  value: String!
}

input OptionInput {
  label: String!
  value: String!
}

type Protocol {
  _id: ID!
  attendanceRecords: [AttendanceRecord!]!
  courseId: ID!
  createdAt: String!
  createdBy: String!
  formId: ID!
  module: String!
  name: String!
}

type Query {
  course(id: String!): Course!
  courses: [Course!]!
  form(id: String!): FormDto!
  forms: [FormDto!]!
  me: UserDto
  protocol(id: String!): Protocol!
  protocols(courseId: String!): [Protocol!]!
  submission(id: String!): Submission!
  submissions(protocolId: String!): [Submission!]!
}

type Submission {
  _id: ID!
  createdAt: String!
  data: JSON!
  formId: ID!
  protocolId: ID!
  submittedBy: String!
}

input UpdateCourseInput {
  id: ID!
}

input UpdateFormInput {
  fields: [FormFieldInput!]
  id: String!
  name: String
}

input UpdateProtocolInput {
  courseId: ID
  formId: ID
  id: ID!
  module: String
  name: String
}

input UpdateSubmissionInput {
  id: ID!
}

input UpdateUserInput {
  _id: ID!
  email: String
  name: String
  password: String
}

type UserDto {
  _id: ID!
  email: String!
  name: String!
  password: String!
  role: String!
}